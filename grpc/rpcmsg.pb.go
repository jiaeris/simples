// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpcmsg.proto

/*
Package grpc is a generated protocol buffer package.

It is generated from these files:
	rpcmsg.proto

It has these top-level messages:
	HelloRequest
	HelloResponse
	RequestStreamObj
	ResponseStreamObj
*/
package grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc1 "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HelloRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *HelloRequest) Reset()                    { *m = HelloRequest{} }
func (m *HelloRequest) String() string            { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()               {}
func (*HelloRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HelloRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type HelloResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *HelloResponse) Reset()                    { *m = HelloResponse{} }
func (m *HelloResponse) String() string            { return proto.CompactTextString(m) }
func (*HelloResponse) ProtoMessage()               {}
func (*HelloResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HelloResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type RequestStreamObj struct {
	Requestid int32  `protobuf:"varint,1,opt,name=requestid" json:"requestid,omitempty"`
	Data      string `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *RequestStreamObj) Reset()                    { *m = RequestStreamObj{} }
func (m *RequestStreamObj) String() string            { return proto.CompactTextString(m) }
func (*RequestStreamObj) ProtoMessage()               {}
func (*RequestStreamObj) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RequestStreamObj) GetRequestid() int32 {
	if m != nil {
		return m.Requestid
	}
	return 0
}

func (m *RequestStreamObj) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type ResponseStreamObj struct {
	Responseid int32  `protobuf:"varint,1,opt,name=responseid" json:"responseid,omitempty"`
	Data       string `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *ResponseStreamObj) Reset()                    { *m = ResponseStreamObj{} }
func (m *ResponseStreamObj) String() string            { return proto.CompactTextString(m) }
func (*ResponseStreamObj) ProtoMessage()               {}
func (*ResponseStreamObj) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ResponseStreamObj) GetResponseid() int32 {
	if m != nil {
		return m.Responseid
	}
	return 0
}

func (m *ResponseStreamObj) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterType((*HelloRequest)(nil), "grpc.HelloRequest")
	proto.RegisterType((*HelloResponse)(nil), "grpc.HelloResponse")
	proto.RegisterType((*RequestStreamObj)(nil), "grpc.RequestStreamObj")
	proto.RegisterType((*ResponseStreamObj)(nil), "grpc.ResponseStreamObj")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc1.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc1.SupportPackageIsVersion4

// Client API for Controller service

type ControllerClient interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc1.CallOption) (*HelloResponse, error)
	SayStream(ctx context.Context, opts ...grpc1.CallOption) (Controller_SayStreamClient, error)
}

type controllerClient struct {
	cc *grpc1.ClientConn
}

func NewControllerClient(cc *grpc1.ClientConn) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc1.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := grpc1.Invoke(ctx, "/grpc.Controller/SayHello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) SayStream(ctx context.Context, opts ...grpc1.CallOption) (Controller_SayStreamClient, error) {
	stream, err := grpc1.NewClientStream(ctx, &_Controller_serviceDesc.Streams[0], c.cc, "/grpc.Controller/SayStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerSayStreamClient{stream}
	return x, nil
}

type Controller_SayStreamClient interface {
	Send(*RequestStreamObj) error
	Recv() (*ResponseStreamObj, error)
	grpc1.ClientStream
}

type controllerSayStreamClient struct {
	grpc1.ClientStream
}

func (x *controllerSayStreamClient) Send(m *RequestStreamObj) error {
	return x.ClientStream.SendMsg(m)
}

func (x *controllerSayStreamClient) Recv() (*ResponseStreamObj, error) {
	m := new(ResponseStreamObj)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Controller service

type ControllerServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloResponse, error)
	SayStream(Controller_SayStreamServer) error
}

func RegisterControllerServer(s *grpc1.Server, srv ControllerServer) {
	s.RegisterService(&_Controller_serviceDesc, srv)
}

func _Controller_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).SayHello(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Controller/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_SayStream_Handler(srv interface{}, stream grpc1.ServerStream) error {
	return srv.(ControllerServer).SayStream(&controllerSayStreamServer{stream})
}

type Controller_SayStreamServer interface {
	Send(*ResponseStreamObj) error
	Recv() (*RequestStreamObj, error)
	grpc1.ServerStream
}

type controllerSayStreamServer struct {
	grpc1.ServerStream
}

func (x *controllerSayStreamServer) Send(m *ResponseStreamObj) error {
	return x.ServerStream.SendMsg(m)
}

func (x *controllerSayStreamServer) Recv() (*RequestStreamObj, error) {
	m := new(RequestStreamObj)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Controller_serviceDesc = grpc1.ServiceDesc{
	ServiceName: "grpc.Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc1.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Controller_SayHello_Handler,
		},
	},
	Streams: []grpc1.StreamDesc{
		{
			StreamName:    "SayStream",
			Handler:       _Controller_SayStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rpcmsg.proto",
}

func init() { proto.RegisterFile("rpcmsg.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 237 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xcf, 0x4a, 0x03, 0x31,
	0x10, 0xc6, 0x1b, 0xa9, 0x7f, 0x76, 0xa8, 0xa0, 0x23, 0xe8, 0x52, 0x44, 0x24, 0xa7, 0x7a, 0x59,
	0x44, 0xf1, 0x05, 0x54, 0xd0, 0x9b, 0xb0, 0xfb, 0x04, 0x69, 0x3b, 0x2c, 0x4a, 0xb2, 0x89, 0x93,
	0x78, 0xe8, 0x13, 0xf8, 0xda, 0xb2, 0xc9, 0xc6, 0xd6, 0xc5, 0xdb, 0xe4, 0xc7, 0xc7, 0x6f, 0xe6,
	0x0b, 0xcc, 0xd8, 0xad, 0x8c, 0x6f, 0x2b, 0xc7, 0x36, 0x58, 0x9c, 0xb6, 0xec, 0x56, 0x52, 0xc2,
	0xec, 0x95, 0xb4, 0xb6, 0x35, 0x7d, 0x7e, 0x91, 0x0f, 0x88, 0x30, 0xed, 0x94, 0xa1, 0x52, 0x5c,
	0x8b, 0x45, 0x51, 0xc7, 0x59, 0xde, 0xc0, 0xf1, 0x90, 0xf1, 0xce, 0x76, 0x9e, 0xb0, 0x84, 0x43,
	0x43, 0xde, 0xab, 0x36, 0xe7, 0xf2, 0x53, 0x3e, 0xc3, 0xc9, 0x60, 0x6a, 0x02, 0x93, 0x32, 0x6f,
	0xcb, 0x0f, 0xbc, 0x84, 0x82, 0x13, 0x7b, 0x5f, 0xc7, 0xfc, 0x7e, 0xbd, 0x05, 0xfd, 0xc2, 0xb5,
	0x0a, 0xaa, 0xdc, 0x4b, 0x0b, 0xfb, 0x59, 0xbe, 0xc0, 0x69, 0xde, 0xb5, 0xd5, 0x5c, 0x01, 0xf0,
	0x00, 0x7f, 0x3d, 0x3b, 0xe4, 0x3f, 0xd1, 0xdd, 0xb7, 0x00, 0x78, 0xb2, 0x5d, 0x60, 0xab, 0x35,
	0x31, 0x3e, 0xc0, 0x51, 0xa3, 0x36, 0xb1, 0x0b, 0x62, 0xd5, 0xf7, 0xaf, 0x76, 0xcb, 0xcf, 0xcf,
	0xfe, 0xb0, 0x64, 0x96, 0x13, 0x7c, 0x84, 0xa2, 0x51, 0x9b, 0x74, 0x09, 0x9e, 0xa7, 0xcc, 0xb8,
	0xe5, 0xfc, 0x22, 0xf3, 0xd1, 0xdd, 0x72, 0xb2, 0x10, 0xb7, 0x62, 0x79, 0x10, 0x3f, 0xfd, 0xfe,
	0x27, 0x00, 0x00, 0xff, 0xff, 0xd7, 0xe3, 0xc5, 0x4b, 0x84, 0x01, 0x00, 0x00,
}
